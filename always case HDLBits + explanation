// synthesis verilog_input_version verilog_2001
module top_module ( 
    input [2:0] sel, 
    input [3:0] data0,
    input [3:0] data1,
    input [3:0] data2,
    input [3:0] data3,
    input [3:0] data4,
    input [3:0] data5,
    output reg [3:0] out   );//

    always@(*) begin  // This is a combinational circuit
        case(sel)
            3'b000: out = data0;
            3'b001: out = data1;
            3'b010: out = data2;
            3'b011: out = data3;
            3'b100: out = data4;
            3'b101: out = data5;
            default out = 0;
        endcase
    end

endmodule

//The idea here is that it's a 3-bit register, so there are 3 bits for each case, which I need to memorize. I also need to change the bit numbers in the case statement from least significant to most significant.
//the rest of it makes sense since i've already seen it from the reading group calls
