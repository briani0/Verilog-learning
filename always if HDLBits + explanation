// synthesis verilog_input_version verilog_2001
module top_module(
    input a,
    input b,
    input sel_b1,
    input sel_b2,
    output wire out_assign,
    output reg out_always   ); 
    
    assign out_assign  = (!sel_b1) ? a :(!sel_b2) ? a: b;
// from chatgpt:
//	•	If sel_b1 is low (0), then out_assign is assigned the value of a.
//  •	If sel_b1 is high (1), it checks the next condition (!sel_b2):
//	•	If sel_b2 is low (0), out_assign is also assigned a.
//	•	If both sel_b1 and sel_b2 are high (1), then out_assign is assigned b.

//a much simpler way than my brute force method: assign out_assign  = (!sel_b1) ? a : (!sel_b2) ? a: b;

    
    always @(*) begin
        if (sel_b1 & sel_b2) begin
            out_always = b;
        end
       else begin
            out_always = a;
// explanation from chatgpt:
//	•	If both sel_b1 and sel_b2 are high (logical AND condition sel_b1 & sel_b2), out_always is set to b.
//	•	Otherwise (if either sel_b1 or sel_b2 is low), out_always is set to a.
// a different way of doing which is just as simple: always @(*) begin
//    case ({sel_b1, sel_b2})
//        2'b11: out_always = b;  // Both sel_b1 and sel_b2 are 1
//        default: out_always = a; // Any other case, output a
//    endcase
// end

    end
    end

endmodule
